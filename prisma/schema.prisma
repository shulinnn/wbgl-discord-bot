// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model User {
  id            Int      @id @default(autoincrement())
  discord_id    BigInt   @unique
  username      String   @unique
  war_token     Int      @default(0)
  played_events Event[]
  organizer_at  Event[]  @relation("eventOrganizer")
  matches       Match[]
  Stats         Stats[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Stats {
  id         Int      @id @default(autoincrement())
  human      Int[]    @default([0, 0])
  orc        Int[]    @default([0, 0])
  undead     Int[]    @default([0, 0])
  night_elf  Int[]    @default([0, 0])
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  updated_at DateTime @updatedAt
  userId     Int
}

enum EventType {
  Meeting
  League
  Tournament
}

enum EventAvailability {
  Private
  Public
}

enum Race {
  Orc
  Undead
  NightElf
  Human
  TBA
}

enum Map {
  Map1
  Map2
  Map3
}

enum EventStatus {
  Scheduled
  Ongoing
  Cancelled
}

enum MatchType {
  BO1
}

model Event {
  id                   Int               @id @default(autoincrement())
  name                 String            @unique
  banner               String
  event_type           EventType
  event_availability   EventAvailability
  channel_category_id  BigInt?
  channel_id           BigInt?
  start_at             DateTime
  event_status         EventStatus       @default(Scheduled)
  player_role_color    String
  organizer_role_color String
  player_role_id       BigInt?
  organizer_role_id    BigInt?
  matches              Match[]
  players              User[]
  organizer            User              @relation("eventOrganizer", fields: [userId], references: [id])
  userId               Int
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
}

model Match {
  id         Int       @id @default(autoincrement())
  players    User[]
  races      Race[]    @default([TBA, TBA])
  score      Int[]
  match_type MatchType
  channel_id BigInt
  map        Map
  Event      Event?    @relation(fields: [eventId], references: [id])
  eventId    Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}
